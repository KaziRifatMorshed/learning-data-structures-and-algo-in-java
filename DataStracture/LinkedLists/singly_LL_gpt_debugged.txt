package DataStracture.LinkedLists;

public class SinglyLinkedList_labClass {
    private static class data_SLL {
        private int data;

        public data_SLL(int data) {
            this.data = data;
        }

        public int getData() {
            return data;
        }

        public void setData(int data) {
            this.data = data;
        }

        @Override
        public String toString() {
            return String.format("%d", this.data);  // Fixed String formatting
        }
    }

    private static class Node_SLL {
        private data_SLL data;
        private Node_SLL next;

        public Node_SLL(data_SLL data, Node_SLL next) {
            this.data = data;
            this.next = next;
        }

        public Node_SLL(data_SLL data) {
            this.data = data;
            this.next = null;  // Initialize next to null if not provided
        }

        public data_SLL getData() {
            return data;
        }

        public void setData(data_SLL data) {
            this.data = data;
        }

        public Node_SLL getNext() {
            return next;
        }

        public void setNext(Node_SLL next) {
            this.next = next;
        }

        @Override
        public String toString() {
            return String.format("%s ", data);  // Fixed String formatting
        }
    }

    private Node_SLL head;
    private int size;

    public SinglyLinkedList_labClass() {
        head = null;
        this.size = 0;
    }

    public SinglyLinkedList_labClass(Node_SLL head) {
        this.head = head;
        this.size = 0;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public int getSize() {
        return size;
    }

    public void addFirst(data_SLL d) {
        Node_SLL new_node = new Node_SLL(d, head);
        head = new_node;
        size++;
    }

    public Node_SLL getLast() {
        if (head == null) {
            return null;  // Handle empty list case
        }

        Node_SLL current = head;
        while (current.getNext() != null) {
            current = current.getNext();
        }
        return current;
    }

    public Node_SLL removeLast() {
        if (isEmpty()) {
            return null;  // Handle empty list case
        }

        if (head.next == null) {  // Only one element in the list
            Node_SLL temp = head;
            head = null;
            size--;
            return temp;
        }

        Node_SLL current = head;
        Node_SLL previous = null;

        while (current.getNext() != null) {
            previous = current;
            current = current.getNext();
        }

        if (previous != null) {
            previous.setNext(null);
        }

        size--;
        return current;
    }

    public void addLast(data_SLL d) {
        Node_SLL new_node = new Node_SLL(d, null);

        if (head == null) {  // If the list is empty
            head = new_node;
        } else {
            Node_SLL last_node = getLast();
            last_node.setNext(new_node);
        }
        size++;
    }

    public void printList() {
        Node_SLL temp = head;
        while (temp != null) {
            System.out.print(temp);
            temp = temp.getNext();  // Move to the next node
        }
        System.out.println();
    }

    public static void main(String[] args) {
        SinglyLinkedList_labClass list1 = new SinglyLinkedList_labClass();

        for (int i = 0; i < 10; i++) {
            list1.addLast(new data_SLL(i));
        }

        System.out.println("List is empty: " + list1.isEmpty());
        System.out.println("Size of list: " + list1.getSize());
        list1.printList();
    }
}
